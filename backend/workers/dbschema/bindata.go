// Code generated by go-bindata.
// sources:
// migrations/001_base.sql
// migrations/002_add_email.sql
// DO NOT EDIT!

package dbschema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_baseSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x8b\x83\x30\x10\x46\xef\xf9\x15\xdf\x51\xd9\xf5\xb2\xe0\xc9\x53\xd4\xec\x6e\x58\xb7\x4a\x4c\x4b\x3d\x06\x15\x11\x6a\x22\x46\xb1\x3f\xbf\x54\x0f\x2d\xd6\xce\xf5\xbd\x99\xe1\x79\x1e\x3e\xba\xb6\x19\xd4\x58\xe3\xd8\x93\x48\x30\x2a\x19\x24\x0d\x13\x06\xfe\x8d\x43\x2a\xc1\xce\x3c\x97\x39\x54\x59\x9a\x49\x8f\x96\x38\x04\x00\xda\x0a\xeb\x84\xfc\x27\x67\x82\xd3\x04\x99\xe0\xff\x54\x14\xf8\x63\xc5\xe7\xe2\x68\xd5\xd5\x8b\x73\xa2\x22\xfa\xa5\xc2\xf9\xf2\x7d\x77\x45\x76\x1a\x56\xfa\x8a\x2e\xa6\x69\xf5\xfe\x56\xaf\xac\x9d\xcd\x50\xed\x1d\xac\xaf\x78\xf3\xab\xba\xc7\x6d\x11\x71\x03\x42\x9e\xeb\x63\x33\x6b\x12\x8b\x34\x7b\xd4\x6f\xca\x83\x5b\x00\x00\x00\xff\xff\xa6\x15\x90\xff\x2d\x01\x00\x00")

func migrations001_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_baseSql,
		"migrations/001_base.sql",
	)
}

func migrations001_baseSql() (*asset, error) {
	bytes, err := migrations001_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_base.sql", size: 301, mode: os.FileMode(420), modTime: time.Unix(1560489799, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_add_emailSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xe6\x52\x50\x50\x50\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4d\xcc\xcc\x51\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x32\x35\xd5\xb4\xe6\xe2\x42\x36\xd1\x25\xbf\x3c\x8f\x18\x33\x5d\x82\xfc\x03\x50\x0c\xb5\x06\x04\x00\x00\xff\xff\x59\x6a\x5a\x38\x98\x00\x00\x00")

func migrations002_add_emailSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_add_emailSql,
		"migrations/002_add_email.sql",
	)
}

func migrations002_add_emailSql() (*asset, error) {
	bytes, err := migrations002_add_emailSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_add_email.sql", size: 152, mode: os.FileMode(420), modTime: time.Unix(1560491735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_base.sql":      migrations001_baseSql,
	"migrations/002_add_email.sql": migrations002_add_emailSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_base.sql":      &bintree{migrations001_baseSql, map[string]*bintree{}},
		"002_add_email.sql": &bintree{migrations002_add_emailSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
